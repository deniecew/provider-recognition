---
title: ""
format:
  html:
    title-block: false
    toc: false
    page-layout: full

params:
  npi : "1740381763"
---

```{=html}
<style>

.centered-title {
  text-align: center;
  font-size: 1.75em;
  font-weight: bold;
  margin-top: 0;
  color: #062F6E;
}

.background-container {
  background-image: url('shoutoutimage07.png'); 
  overflow: hidden; 
  background-size: cover;
  background-position: center;
  height: 75vh; 
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: white;
  text-align: center;
}

.centered-text {
  font-size: 1.5em;
  font-weight: bold;
  font: Draft A;
  background-color: transparent;
  padding: 0;
  margin-left: 250px;  
  margin-right: 250px;   

}

.footer {
  position: right;
  text-align: right;
  bottom: 0;
  width: 100%;
  height: 0px; 
  background-color: transparent; 
  color: #062F6E;
}
</style>
```

```{r}
#| echo: false
#| warning: false 


#load packages----
library(tidytext)
library(tidyverse)
library(janitor)
library(dplyr)
library(gt)
library(tinytex)

###Cleaning the Data and Preparing Matches

commentdata <- read.csv("C:/Users/4477078/OneDrive - Moffitt Cancer Center/provider_recognition/commentdata.csv")

commentdata <- commentdata %>% 
  clean_names() %>%
  filter(provider_nm != "Provider New/Ungroupable")

commentdata$npi_num<-as.character(commentdata$npi_num)
  
save(commentdata,file="C:/Users/4477078/OneDrive - Moffitt Cancer Center/provider_recognition/commentdata.Rdata")

#filter providers with comments
providermatches <- data.frame(provider_nm = character(), npi_num = character(), match_count = integer(), 
                         stringsAsFactors = FALSE)

for (npi_val in unique(commentdata$npi_num)){
  
  # Proper filtering using dplyr
  subsetcomments <- commentdata %>% filter(npi_num == npi_val)
  
  # Split resource_name into last and first names
  subsetcomments[c('last_nm', 'first_nm')] <- str_split_fixed(subsetcomments$resource_name, ' ', 2)
  
  # Title-case the names
  last_nm <- str_to_title(subsetcomments$last_nm)
  first_nm <- str_to_title(subsetcomments$first_nm)
  
  # Clean response text
  x <- subsetcomments$response
  y <- str_replace_all(x, " ", "")
  
  # Check for name matches
  subsetcomments$check1 <- grepl(last_nm, y)
  subsetcomments$check2 <- grepl(first_nm, y)
  
  # Filter rows where either name is found
  named_comments <- subsetcomments %>% filter(check1 | check2)
  
  match_count<-nrow(named_comments)
  provider<-unique(subsetcomments$provider_nm)

  providermatches <- rbind(providermatches, data.frame(provider_nm = provider, npi_num = npi_val, match_count = match_count))
}

providermatches <- providermatches %>%
  filter(match_count > 0)

save(providermatches,file="C:/Users/4477078/OneDrive - Moffitt Cancer Center/provider_recognition/providermatches.Rdata")

name_filter <- commentdata %>%
  filter(npi_num == params$npi) %>%
  separate(provider_nm, into = c("LastName", "FirstName"), sep = ", ") %>%
  mutate(fullname = paste(FirstName, LastName, sep = " ")) %>%
  distinct(fullname)

#run for parameterized data
filter_npi<-commentdata%>%
  filter(npi_num == params$npi)

#separate into first and last name
filter_npi[c('last_nm', 'first_nm' )] <- str_split_fixed(filter_npi$resource_name, ' ', 2)

last_nm <- str_to_title(filter_npi$last_nm)
first_nm <- str_to_title(filter_npi$first_nm)

#look for first or last name in comment, print if it's there
x <- filter_npi$response

y <-str_replace_all(x, " ", "") #remove spaces in response text

filter_npi$check1 <- grepl(last_nm,  y)
filter_npi$check2 <- grepl(first_nm, y)


named_comments <- filter_npi %>%
  filter(check1 == 'TRUE' | check2 == 'TRUE') 

n<- nrow(named_comments)


#Rank Comments
bigrams_separated <- named_comments %>% 
  unnest_tokens(bigram, response, token = "ngrams", n = 2) %>% 
  filter(!is.na(bigram)) %>% 
  separate(bigram, c("word1", "word2"), sep = " ")  

negate_words <- c("not", "without", "no", "can't", "don't", "won't", "never")

bigram_sentiment <- bigrams_separated %>%
  mutate(negated = if_else(word1 %in% negate_words, TRUE, FALSE)) %>% 
  left_join(get_sentiments("afinn"), by = c("word1" = "word")) %>%
  rename(value1 = value) %>% 
  left_join(get_sentiments("afinn"), by = c("word2" = "word")) %>% 
  rename(value2 = value) %>% 
  mutate(value2 = if_else(negated, -value2, value2)) %>% 
  mutate(sentiment = rowSums(select(., value1, value2), na.rm = TRUE)) %>% 
  group_by(survey_id, question_text_latest) %>%
  summarize(total_sentiment = sum(sentiment, na.rm = TRUE)) %>% 
  inner_join(named_comments %>% select(resource_name, npi_num, survey_id, question_text_latest, response), by =
  c("survey_id", "question_text_latest")) %>%
  arrange(resource_name, desc(total_sentiment)) %>%
  ungroup() %>%
  select(response)

comments_all <- filter_npi %>%
  select(response)%>%
  rename('All Positive Comments' = response) %>%
  gt() %>%
  cols_align(align="left",columns = everything())%>%
  tab_options(column_labels.background.color = 'dodgerblue4')%>%
  tab_style(style=cell_text(align="center"),
            locations = cells_column_labels(columns = everything())
            )

  # rename('Provider Specific Positive Comments' = response) %>%
  # gt() %>%
  # cols_align(align="left",columns = everything())%>%
  # tab_options(column_labels.background.color = 'dodgerblue4')%>%
  # tab_style(style=cell_text(align="center"),
  #           locations = cells_column_labels(columns = everything())
  #           )



 #named comments sorted

```

::: centered-title
<!-- `r paste("ðŸŽ‰ SHOUT OUT â€”", name_filter, "ðŸŽ‰")` -->

`r paste("SHOUT OUT â€”", name_filter)`
:::

:::: background-container
::: centered-text
<!-- `r if (n == 0) {   "No data available" } else if (n == 1) {   paste0('"', bigram_sentiment[1, ], '"', collapse = "\n") } else {   paste0('"', bigram_sentiment[1, ], '"', "\n\n", '"', bigram_sentiment[2, ], '"') }` -->

`r if (n == 0) {   "No data available" } else{ paste0('"', bigram_sentiment[1, ], '"', collapse = "\n") }`
:::
::::

::: footer
`r paste("Comment received ", as.Date(unique(subsetcomments$recdate)))`
:::
